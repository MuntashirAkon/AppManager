// SPDX-License-Identifier: Apache-2.0 AND GPL-3.0-or-later

plugins {
    id('com.android.application')
    id('dev.rikka.tools.refine') version "${refine_version}"
}

android {
    namespace 'io.github.muntashirakon.AppManager'
    compileSdk compile_sdk

    defaultConfig {
        applicationId 'io.github.muntashirakon.AppManager'
        minSdk min_sdk
        targetSdk target_sdk
        versionCode 423
        versionName "3.1.0"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        // Add build time to BuildConfig
        buildConfigField "long", "BUILD_TIME_MILLIS", "${buildTime()}"
    }

    signingConfigs {
        debug {
            storeFile file('dev_keystore.jks')
            storePassword 'kJCp!Bda#PBdN2RLK%yMK@hatq&69E'
            keyPassword 'kJCp!Bda#PBdN2RLK%yMK@hatq&69E'
            keyAlias 'key0'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "App Manager"
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            signingConfig signingConfigs.debug
            resValue "string", "app_name", "AM Debug"
        }
    }
    lint {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }
    splits {
        abi {
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }
    androidResources {
        noCompress 'jar', 'sh'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    dependenciesInfo {
        includeInApk false
        includeInBundle false
    }
    packagingOptions {
        exclude 'META-INF/*.version'
    }
}

dependencies {
    compileOnly project(path: ':hiddenapi')

    // Deprecated: This is being replaced
    implementation project(path: ':libapkparser')

    // Core Libraries
    implementation project(path: ':libcore:compat')
    implementation project(path: ':libcore:io')
    implementation project(path: ':libcore:ui')
    implementation project(path: ':libserver')
    implementation project(path: ':docs')

    // ADB
    implementation "com.github.MuntashirAkon:libadb-android:${libadb_version}"

    // API
    implementation "com.github.MuntashirAkon:unapkm-android:${unapkm_version}"
    implementation project(path: ':libopenpgp')

    // APK Editing
    implementation "com.github.REAndroid:ARSCLib:${arsclib_version}"
    implementation "com.github.MuntashirAkon:apksig-android:${apksig_version}"
    implementation "com.github.MuntashirAkon:sun-security-android:${sun_security_version}"
    implementation "org.bouncycastle:bcprov-jdk15on:${bouncycastle_version}"
    implementation "org.bouncycastle:bcpkix-jdk15on:${bouncycastle_version}"
    implementation "com.github.MuntashirAkon.jadx:jadx-core:${jadx_version}"
    // Replace SLF4J with a placeholder
    configurations {
        configureEach {
            exclude group: 'org.slf4j', module: 'slf4j-api'
        }
    }
    implementation "com.github.MuntashirAkon.jadx:jadx-dex-input:${jadx_version}"
    // Replace SLF4J with a placeholder
    configurations {
        configureEach {
            exclude group: 'org.slf4j', module: 'slf4j-api'
        }
    }

    // DB
    implementation "androidx.room:room-runtime:${room_version}"
    annotationProcessor "androidx.room:room-compiler:${room_version}"
    implementation 'com.github.evrencoskun:TableView:v0.8.9.4'
    implementation 'de.siegmar:fastcsv:2.2.1'

    // FM
    implementation "com.j256.simplemagic:simplemagic:${simplemagic_version}"

    // Privileged
    implementation "com.github.topjohnwu.libsu:core:${libsu_version}"
    implementation "org.lsposed.hiddenapibypass:hiddenapibypass:${hiddenapibypass_version}"
    implementation "dev.rikka.tools.refine:runtime:${refine_version}"

    // UI
    implementation "com.google.android.material:material:${material_version}"
    implementation "androidx.appcompat:appcompat:${appcompat_version}"
    // Fix duplicate classes issue in material
    configurations {
        configureEach {
            exclude group: 'androidx.lifecycle', module: 'lifecycle-viewmodel-ktx'
        }
    }
    // AppCompat 1.5.0 still includes the buggy implementation of documentfile library (1.0.0)
    implementation "androidx.documentfile:documentfile:${documentfile_version}"
    implementation "androidx.core:core-splashscreen:${splashscreen_version}"
    implementation "androidx.webkit:webkit:${webkit_version}"

    // Utility
    implementation "com.google.code.gson:gson:${gson_version}"

//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'

    // Espresso UI Testing
//    androidTestImplementation "com.android.support.test.espresso:espresso-core:3.0.2"
    // Optional if you need to detect intents.
//    androidTestImplementation "com.android.support.test.espresso:espresso-intents:3.0.2"

    // Unit Testing
    testImplementation "junit:junit:${junit_version}"
    testImplementation "org.robolectric:robolectric:${robolectric_version}"
}

preBuild.dependsOn ":server:build"

static def buildTime() {
    return System.currentTimeMillis()
}
